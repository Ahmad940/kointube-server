// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  country  String
  role     Role    @default(User)
  password String
  videos   Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Like    Like[]
  Dislike Dislike[]
  View    View[]
  @@index([id, email, username])
}

model Video {
  id           String @id @default(cuid())
  title        String
  videoUrl     String // the video url of video uploaded to cloudinary
  thumbnailUrl String // the image url for image uploaded to cloudinary
  authorid     String
  author       User   @relation(fields: [authorid], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Like      Like[]
  dislike   Dislike[]
  View      View[]
}

model Like {
  id      String @id @default(cuid())
  userid  String
  videoid String
  video   Video  @relation(fields: [videoid], references: [id])
  user    User   @relation(fields: [userid], references: [id])

  createdAt DateTime @default(now())
}

model Dislike {
  id      String @id @default(cuid())
  userid  String
  videoid String
  video   Video  @relation(fields: [videoid], references: [id])
  user    User   @relation(fields: [userid], references: [id])

  createdAt DateTime @default(now())
}

model View {
  id      String @id @default(cuid())
  userid  String
  videoid String
  video   Video  @relation(fields: [videoid], references: [id])
  user    User   @relation(fields: [userid], references: [id])

  createdAt DateTime @default(now())
}

// model Channel {
//   id          String  @id @default(cuid())
//   name        String  @unique
//   author      User    @relation(fields: [authorId], references: [id])
//   authorId    String  @unique
//   description String?
// }

enum Role {
  User
  Mod
  Admin
}
